Index: include/common.h
===================================================================
--- include/common.h	(revision 56907)
+++ include/common.h	(working copy)
@@ -70,6 +70,9 @@
 #define ON	1
 #define OFF	0
 
+#define ZBX_RUN_BACKGROUND  0
+#define ZBX_RUN_FOREGROUND  1
+
 #if defined(_WINDOWS)
 #	define	ZBX_SERVICE_NAME_LEN	64
 extern char ZABBIX_SERVICE_NAME[ZBX_SERVICE_NAME_LEN];
Index: include/daemon.h
===================================================================
--- include/daemon.h	(revision 56907)
+++ include/daemon.h	(working copy)
@@ -28,7 +28,7 @@
 
 #include "threads.h"
 
-int	daemon_start(int allow_root, const char *user);
+int	daemon_start(int allow_root, const char *user, int run_foreground);
 void	daemon_stop();
 
 int	zbx_sigusr_send(int flags);
@@ -36,6 +36,6 @@
 #define ZBX_IS_RUNNING()	1
 #define ZBX_DO_EXIT()
 
-#define START_MAIN_ZABBIX_ENTRY(a, u)	daemon_start(a, u)
+#define START_MAIN_ZABBIX_ENTRY(a, u, f)	daemon_start(a, u, f)
 
 #endif	/* ZABBIX_DAEMON_H */
Index: src/libs/zbxnix/daemon.c
===================================================================
--- src/libs/zbxnix/daemon.c	(revision 56907)
+++ src/libs/zbxnix/daemon.c	(working copy)
@@ -274,7 +274,8 @@
  *                                                                            *
  * Parameters: allow_root - allow root permission for application             *
  *             user       - user on the system to which to drop the           *
- *                          privileges                                        *
+ *                          privileges   
+ *             run_foreground - allow running in foreground                                     *
  *                                                                            *
  * Author: Alexei Vladishev                                                   *
  *                                                                            *
@@ -281,7 +282,7 @@
  * Comments: it doesn't allow running under 'root' if allow_root is zero      *
  *                                                                            *
  ******************************************************************************/
-int	daemon_start(int allow_root, const char *user)
+int	daemon_start(int allow_root, const char *user, int run_foreground)
 {
 	pid_t		pid;
 	struct passwd	*pwd;
@@ -336,15 +337,20 @@
 #endif
 	}
 
-	if (0 != (pid = zbx_fork()))
-		exit(EXIT_SUCCESS);
+	if (ZBX_RUN_FOREGROUND != run_foreground)
+		if (0 != (pid = zbx_fork()))
+			exit(EXIT_SUCCESS);
 
 	setsid();
 
 	signal(SIGHUP, SIG_IGN);
 
-	if (0 != (pid = zbx_fork()))
-		exit(EXIT_SUCCESS);
+	if (ZBX_RUN_FOREGROUND == run_foreground) {
+		zabbix_log(LOG_LEVEL_INFORMATION, "Running in foreground");
+	} else {
+		if (0 != (pid = zbx_fork()))
+			exit(EXIT_SUCCESS);
+	}
 
 	if (-1 == chdir("/"))	/* this is to eliminate warning: ignoring return value of chdir */
 		assert(0);
Index: src/libs/zbxsysinfo/linux/boottime.c
===================================================================
--- src/libs/zbxsysinfo/linux/boottime.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/boottime.c	(working copy)
@@ -28,9 +28,9 @@
 	int		ret = SYSINFO_RET_FAIL;
 	unsigned long	value;
 
-	if (NULL == (f = fopen("/proc/stat", "r")))
+	if (NULL == (f = fopen("/docker/proc/stat", "r")))
 	{
-		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /proc/stat: %s", zbx_strerror(errno)));
+		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /docker/proc/stat: %s", zbx_strerror(errno)));
 		return ret;
 	}
 
@@ -49,7 +49,7 @@
 	zbx_fclose(f);
 
 	if (SYSINFO_RET_FAIL == ret)
-		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot find a line with \"btime\" in /proc/stat."));
+		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot find a line with \"btime\" in /docker/proc/stat."));
 
 	return ret;
 }
Index: src/libs/zbxsysinfo/linux/cpu.c
===================================================================
--- src/libs/zbxsysinfo/linux/cpu.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/cpu.c	(working copy)
@@ -190,9 +190,9 @@
 	zbx_uint64_t	value = 0;
 	FILE		*f;
 
-	if (NULL == (f = fopen("/proc/stat", "r")))
+	if (NULL == (f = fopen("/docker/proc/stat", "r")))
 	{
-		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /proc/stat: %s", zbx_strerror(errno)));
+		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /docker/proc/stat: %s", zbx_strerror(errno)));
 		return SYSINFO_RET_FAIL;
 	}
 
@@ -211,7 +211,7 @@
 	zbx_fclose(f);
 
 	if (SYSINFO_RET_FAIL == ret)
-		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot find a line with \"ctxt\" in /proc/stat."));
+		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot find a line with \"ctxt\" in /docker/proc/stat."));
 
 	return ret;
 }
@@ -223,9 +223,9 @@
 	zbx_uint64_t	value = 0;
 	FILE		*f;
 
-	if (NULL == (f = fopen("/proc/stat", "r")))
+	if (NULL == (f = fopen("/docker/proc/stat", "r")))
 	{
-		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /proc/stat: %s", zbx_strerror(errno)));
+		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /docker/proc/stat: %s", zbx_strerror(errno)));
 		return SYSINFO_RET_FAIL;
 	}
 
@@ -244,7 +244,7 @@
 	zbx_fclose(f);
 
 	if (SYSINFO_RET_FAIL == ret)
-		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot find a line with \"intr\" in /proc/stat."));
+		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot find a line with \"intr\" in /docker/proc/stat."));
 
 	return ret;
 }
Index: src/libs/zbxsysinfo/linux/diskio.c
===================================================================
--- src/libs/zbxsysinfo/linux/diskio.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/diskio.c	(working copy)
@@ -22,12 +22,12 @@
 #include "stats.h"
 #include "diskdevices.h"
 
-#define ZBX_DEV_PFX	"/dev/"
+#define ZBX_DEV_PFX	"/docker/dev/"
 #define ZBX_DEV_READ	0
 #define ZBX_DEV_WRITE	1
 
 #if defined(KERNEL_2_4)
-#	define INFO_FILE_NAME	"/proc/partitions"
+#	define INFO_FILE_NAME	"/docker/proc/partitions"
 #	define PARSE(line)	if (sscanf(line, ZBX_FS_UI64 ZBX_FS_UI64 " %*d %s " 		\
 					ZBX_FS_UI64 " %*d " ZBX_FS_UI64 " %*d "			\
 					ZBX_FS_UI64 " %*d " ZBX_FS_UI64 " %*d %*d %*d %*d",	\
@@ -40,7 +40,7 @@
 				&ds[ZBX_DSTAT_W_SECT]						\
 				) != 7) continue
 #else
-#	define INFO_FILE_NAME	"/proc/diskstats"
+#	define INFO_FILE_NAME	"/docker/proc/diskstats"
 #	define PARSE(line)	if (sscanf(line, ZBX_FS_UI64 ZBX_FS_UI64 " %s "			\
 					ZBX_FS_UI64 " %*d " ZBX_FS_UI64 " %*d "			\
 					ZBX_FS_UI64 " %*d " ZBX_FS_UI64 " %*d %*d %*d %*d",	\
Index: src/libs/zbxsysinfo/linux/diskspace.c
===================================================================
--- src/libs/zbxsysinfo/linux/diskspace.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/diskspace.c	(working copy)
@@ -118,9 +118,9 @@
 	FILE		*f;
 	struct zbx_json	j;
 
-	if (NULL == (f = fopen("/proc/mounts", "r")))
+	if (NULL == (f = fopen("/docker/proc/mounts", "r")))
 	{
-		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /proc/mounts: %s", zbx_strerror(errno)));
+		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /docker/proc/mounts: %s", zbx_strerror(errno)));
 		return SYSINFO_RET_FAIL;
 	}
 
Index: src/libs/zbxsysinfo/linux/hardware.h
===================================================================
--- src/libs/zbxsysinfo/linux/hardware.h	(revision 56907)
+++ src/libs/zbxsysinfo/linux/hardware.h	(working copy)
@@ -24,7 +24,7 @@
 #define SMBIOS_STATUS_ERROR	2
 #define SMBIOS_STATUS_OK	3
 
-#define DEV_MEM			"/dev/mem"
+#define DEV_MEM			"/docker/dev/mem"
 #define SMBIOS_ENTRY_POINT_SIZE	0x20
 #define DMI_HEADER_SIZE		4
 
@@ -36,9 +36,9 @@
 #define DMI_GET_MODEL		0x04
 #define DMI_GET_SERIAL		0x08
 
-#define CPU_MAX_FREQ_FILE	"/sys/devices/system/cpu/cpu%d/cpufreq/cpuinfo_max_freq"
+#define CPU_MAX_FREQ_FILE	"/docker/sys/devices/system/cpu/cpu%d/cpufreq/cpuinfo_max_freq"
 
-#define HW_CPU_INFO_FILE	"/proc/cpuinfo"
+#define HW_CPU_INFO_FILE	"/docker/proc/cpuinfo"
 #define HW_CPU_ALL_CPUS		-1
 #define HW_CPU_SHOW_ALL		1
 #define HW_CPU_SHOW_MAXFREQ	2
Index: src/libs/zbxsysinfo/linux/kernel.c
===================================================================
--- src/libs/zbxsysinfo/linux/kernel.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/kernel.c	(working copy)
@@ -43,9 +43,9 @@
 {
 	zbx_uint64_t	value;
 
-	if (SYSINFO_RET_FAIL == read_uint64_from_procfs("/proc/sys/fs/file-max", &value))
+	if (SYSINFO_RET_FAIL == read_uint64_from_procfs("/docker/proc/sys/fs/file-max", &value))
 	{
-		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot obtain data from /proc/sys/fs/file-max."));
+		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot obtain data from /docker/proc/sys/fs/file-max."));
 		return SYSINFO_RET_FAIL;
 	}
 
@@ -57,9 +57,9 @@
 {
 	zbx_uint64_t	value;
 
-	if (SYSINFO_RET_FAIL == read_uint64_from_procfs("/proc/sys/kernel/pid_max", &value))
+	if (SYSINFO_RET_FAIL == read_uint64_from_procfs("/docker/proc/sys/kernel/pid_max", &value))
 	{
-		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot obtain data from /proc/sys/kernel/pid_max."));
+		SET_MSG_RESULT(result, zbx_strdup(NULL, "Cannot obtain data from /docker/proc/sys/kernel/pid_max."));
 		return SYSINFO_RET_FAIL;
 	}
 
Index: src/libs/zbxsysinfo/linux/memory.c
===================================================================
--- src/libs/zbxsysinfo/linux/memory.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/memory.c	(working copy)
@@ -72,9 +72,9 @@
 	char		*t, c[MAX_STRING_LEN];
 	zbx_uint64_t	res = 0;
 
-	if (NULL == (f = fopen("/proc/meminfo", "r")))
+	if (NULL == (f = fopen("/docker/proc/meminfo", "r")))
 	{
-		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /proc/meminfo: %s", zbx_strerror(errno)));
+		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /docker/proc/meminfo: %s", zbx_strerror(errno)));
 		return SYSINFO_RET_FAIL;
 	}
 
Index: src/libs/zbxsysinfo/linux/net.c
===================================================================
--- src/libs/zbxsysinfo/linux/net.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/net.c	(working copy)
@@ -48,9 +48,9 @@
 		return SYSINFO_RET_FAIL;
 	}
 
-	if (NULL == (f = fopen("/proc/net/dev", "r")))
+	if (NULL == (f = fopen("/docker/proc/net/dev", "r")))
 	{
-		*error = zbx_dsprintf(NULL, "Cannot open /proc/net/dev: %s", zbx_strerror(errno));
+		*error = zbx_dsprintf(NULL, "Cannot open /docker/proc/net/dev: %s", zbx_strerror(errno));
 		return SYSINFO_RET_FAIL;
 	}
 
@@ -88,7 +88,7 @@
 
 	if (SYSINFO_RET_FAIL == ret)
 	{
-		*error = zbx_strdup(NULL, "Cannot find information for this network interface in /proc/net/dev.");
+		*error = zbx_strdup(NULL, "Cannot find information for this network interface in /docker/proc/net/dev.");
 		return SYSINFO_RET_FAIL;
 	}
 
@@ -284,9 +284,9 @@
 	FILE		*f;
 	struct zbx_json	j;
 
-	if (NULL == (f = fopen("/proc/net/dev", "r")))
+	if (NULL == (f = fopen("/docker/proc/net/dev", "r")))
 	{
-		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /proc/net/dev: %s", zbx_strerror(errno)));
+		SET_MSG_RESULT(result, zbx_dsprintf(NULL, "Cannot open /docker/proc/net/dev: %s", zbx_strerror(errno)));
 		return SYSINFO_RET_FAIL;
 	}
 
@@ -344,7 +344,7 @@
 
 	buffer = zbx_malloc(NULL, buffer_alloc);
 
-	if (0 < (n = proc_read_file("/proc/net/tcp", &buffer, &buffer_alloc)))
+	if (0 < (n = proc_read_file("/docker/proc/net/tcp", &buffer, &buffer_alloc)))
 	{
 		ret = SYSINFO_RET_OK;
 
@@ -359,7 +359,7 @@
 		}
 	}
 
-	if (0 < (n = proc_read_file("/proc/net/tcp6", &buffer, &buffer_alloc)))
+	if (0 < (n = proc_read_file("/docker/proc/net/tcp6", &buffer, &buffer_alloc)))
 	{
 		ret = SYSINFO_RET_OK;
 
@@ -402,7 +402,7 @@
 
 	buffer = zbx_malloc(NULL, buffer_alloc);
 
-	if (0 < (n = proc_read_file("/proc/net/udp", &buffer, &buffer_alloc)))
+	if (0 < (n = proc_read_file("/docker/proc/net/udp", &buffer, &buffer_alloc)))
 	{
 		ret = SYSINFO_RET_OK;
 
@@ -417,7 +417,7 @@
 		}
 	}
 
-	if (0 < (n = proc_read_file("/proc/net/udp6", &buffer, &buffer_alloc)))
+	if (0 < (n = proc_read_file("/docker/proc/net/udp6", &buffer, &buffer_alloc)))
 	{
 		ret = SYSINFO_RET_OK;
 
Index: src/libs/zbxsysinfo/linux/proc.c
===================================================================
--- src/libs/zbxsysinfo/linux/proc.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/proc.c	(working copy)
@@ -86,7 +86,7 @@
 	if (NULL == procname || '\0' == *procname)
 		return SUCCEED;
 
-	/* process name in /proc/[pid]/status contains limited number of characters */
+	/* process name in /docker/proc/[pid]/status contains limited number of characters */
 	if (SUCCEED == cmp_status(f_stat, procname))
 		return SUCCEED;
 
@@ -266,12 +266,12 @@
 		if (0 == strcmp(entries->d_name, "self"))
 			continue;
 
-		zbx_snprintf(tmp, sizeof(tmp), "/proc/%s/cmdline", entries->d_name);
+		zbx_snprintf(tmp, sizeof(tmp), "/docker/proc/%s/cmdline", entries->d_name);
 
 		if (NULL == (f_cmd = fopen(tmp, "r")))
 			continue;
 
-		zbx_snprintf(tmp, sizeof(tmp), "/proc/%s/status", entries->d_name);
+		zbx_snprintf(tmp, sizeof(tmp), "/docker/proc/%s/status", entries->d_name);
 
 		if (NULL == (f_stat = fopen(tmp, "r")))
 			continue;
@@ -407,12 +407,12 @@
 		if (0 == strcmp(entries->d_name, "self"))
 			continue;
 
-		zbx_snprintf(tmp, sizeof(tmp), "/proc/%s/cmdline", entries->d_name);
+		zbx_snprintf(tmp, sizeof(tmp), "/docker/proc/%s/cmdline", entries->d_name);
 
 		if (NULL == (f_cmd = fopen(tmp, "r")))
 			continue;
 
-		zbx_snprintf(tmp, sizeof(tmp), "/proc/%s/status", entries->d_name);
+		zbx_snprintf(tmp, sizeof(tmp), "/docker/proc/%s/status", entries->d_name);
 
 		if (NULL == (f_stat = fopen(tmp, "r")))
 			continue;
Index: src/libs/zbxsysinfo/linux/sensors.c
===================================================================
--- src/libs/zbxsysinfo/linux/sensors.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/sensors.c	(working copy)
@@ -21,9 +21,9 @@
 #include "zbxregexp.h"
 
 #if defined(KERNEL_2_4)
-#define DEVICE_DIR	"/proc/sys/dev/sensors"
+#define DEVICE_DIR	"/docker/proc/sys/dev/sensors"
 #else
-#define DEVICE_DIR	"/sys/class/hwmon"
+#define DEVICE_DIR	"/docker/sys/class/hwmon"
 static char	*locations[] = {"", "/device", NULL};
 #endif
 
@@ -180,7 +180,7 @@
 		}
 		else
 		{
-			zbx_snprintf(bus_path, sizeof(bus_path), "/sys/class/i2c-adapter/i2c-%d", bus_i2c);
+			zbx_snprintf(bus_path, sizeof(bus_path), "/docker/sys/class/i2c-adapter/i2c-%d", bus_i2c);
 			bus_subfolder = sysfs_read_attr(bus_path, &bus_attr);
 
 			if (NULL != bus_subfolder && '\0' != *bus_subfolder)
Index: src/libs/zbxsysinfo/linux/software.h
===================================================================
--- src/libs/zbxsysinfo/linux/software.h	(revision 56907)
+++ src/libs/zbxsysinfo/linux/software.h	(working copy)
@@ -20,8 +20,8 @@
 #ifndef ZABBIX_SOFTWARE_H
 #define ZABBIX_SOFTWARE_H
 
-#define SW_OS_FULL	"/proc/version"
-#define SW_OS_SHORT	"/proc/version_signature"
+#define SW_OS_FULL	"/docker/proc/version"
+#define SW_OS_SHORT	"/docker/proc/version_signature"
 #define SW_OS_NAME	"/etc/issue.net"
 
 typedef struct
Index: src/libs/zbxsysinfo/linux/swap.c
===================================================================
--- src/libs/zbxsysinfo/linux/swap.c	(revision 56907)
+++ src/libs/zbxsysinfo/linux/swap.c	(working copy)
@@ -78,7 +78,7 @@
 swap_stat_t;
 
 #ifdef KERNEL_2_4
-#	define INFO_FILE_NAME	"/proc/partitions"
+#	define INFO_FILE_NAME	"/docker/proc/partitions"
 #	define PARSE(line)								\
 											\
 		if (6 != sscanf(line, "%d %d %*d %*s "					\
@@ -92,7 +92,7 @@
 				&result->wsect		/* wsect */			\
 				)) continue
 #else
-#	define INFO_FILE_NAME	"/proc/diskstats"
+#	define INFO_FILE_NAME	"/docker/proc/diskstats"
 #	define PARSE(line)								\
 											\
 		if (6 != sscanf(line, "%d %d %*s "					\
@@ -158,9 +158,9 @@
 	FILE	*f;
 
 #ifdef KERNEL_2_4
-	if (NULL != (f = fopen("/proc/stat", "r")))
+	if (NULL != (f = fopen("/docker/proc/stat", "r")))
 #else
-	if (NULL != (f = fopen("/proc/vmstat", "r")))
+	if (NULL != (f = fopen("/docker/proc/vmstat", "r")))
 #endif
 	{
 		while (NULL != fgets(line, sizeof(line), f))
@@ -215,15 +215,15 @@
 		ret = get_swap_pages(result);
 		swapdev = NULL;
 	}
-	else if (0 != strncmp(swapdev, "/dev/", 5))
+	else if (0 != strncmp(swapdev, "/docker/dev/", 5))
 		offset = 5;
 
-	if (NULL == (f = fopen("/proc/swaps", "r")))
+	if (NULL == (f = fopen("/docker/proc/swaps", "r")))
 		return ret;
 
 	while (NULL != fgets(line, sizeof(line), f))
 	{
-		if (0 != strncmp(line, "/dev/", 5))
+		if (0 != strncmp(line, "/docker/dev/", 5))
 			continue;
 
 		if (NULL == (s = strchr(line, ' ')))
Index: src/zabbix_agent/zabbix_agentd.c
===================================================================
--- src/zabbix_agent/zabbix_agentd.c	(revision 56907)
+++ src/zabbix_agent/zabbix_agentd.c	(working copy)
@@ -55,6 +55,8 @@
 
 const char	*progname = NULL;
 
+int CONFIG_FOREGROUND = ZBX_RUN_FOREGROUND;
+
 /* default config file location */
 #ifdef _WINDOWS
 	static char	DEFAULT_CONFIG_FILE[]	= "C:\\zabbix_agentd.conf";
@@ -82,9 +84,9 @@
 /* application USAGE message */
 const char	usage_message[] =
 #ifndef _WINDOWS
-	"[-Vhp] [-R <runtime option>]"
+	"[-Vhfp] [-R <runtime option>]"
 #else
-	"[-Vhp] [-idsx] [-m]"
+	"[-Vhfp] [-idsx] [-m]"
 #endif
 	" [-c <config-file>] [-t <item key>]";
 /* end of application USAGE message */
@@ -93,6 +95,7 @@
 const char	*help_message[] = {
 	"Options:",
 	"  -c --config <config-file>       Absolute path to the configuration file",
+	"  -f --foreground                 Run in foreground",
 	"  -p --print                      Print known items and exit",
 	"  -t --test <item key>            Test specified item and exit",
 	"  -h --help                       Display help information",
@@ -130,6 +133,7 @@
 	{"config",		1,	NULL,	'c'},
 	{"help",		0,	NULL,	'h'},
 	{"version",		0,	NULL,	'V'},
+	{"foreground",  0,  NULL,   'f'},
 	{"print",		0,	NULL,	'p'},
 	{"test",		1,	NULL,	't'},
 #ifndef _WINDOWS
@@ -147,7 +151,7 @@
 };
 
 static char	shortopts[] =
-	"c:hVpt:"
+	"c:hVfpt:"
 #ifndef _WINDOWS
 	"R:"
 #else
@@ -263,6 +267,9 @@
 #endif
 				exit(EXIT_SUCCESS);
 				break;
+			case 'f':
+				CONFIG_FOREGROUND = ZBX_RUN_FOREGROUND;
+				break;
 			case 'p':
 				if (ZBX_TASK_START == t->task)
 					t->task = ZBX_TASK_PRINT_SUPPORTED;
@@ -944,7 +951,7 @@
 			break;
 	}
 
-	START_MAIN_ZABBIX_ENTRY(CONFIG_ALLOW_ROOT, CONFIG_USER);
+	START_MAIN_ZABBIX_ENTRY(CONFIG_ALLOW_ROOT, CONFIG_USER, CONFIG_FOREGROUND);
 
 	exit(EXIT_SUCCESS);
 }
Index: src/zabbix_proxy/proxy.c
===================================================================
--- src/zabbix_proxy/proxy.c	(revision 56907)
+++ src/zabbix_proxy/proxy.c	(working copy)
@@ -61,6 +61,7 @@
 const char	*help_message[] = {
 	"Options:",
 	"  -c --config <file>              Absolute path to the configuration file",
+	"  -f --foreground                 Run in foreground",
 	"  -R --runtime-control <option>   Perform administrative functions",
 	"",
 	"Runtime control options:",
@@ -85,6 +86,7 @@
 static struct zbx_option	longopts[] =
 {
 	{"config",		1,	NULL,	'c'},
+	{"foreground",  0,  NULL,   'f'},
 	{"runtime-control",	1,	NULL,	'R'},
 	{"help",		0,	NULL,	'h'},
 	{"version",		0,	NULL,	'V'},
@@ -92,7 +94,7 @@
 };
 
 /* short options */
-static char	shortopts[] = "c:hVR:";
+static char	shortopts[] = "c:hVfR:";
 
 /* end of COMMAND LINE OPTIONS */
 
@@ -197,6 +199,8 @@
 
 /* zabbix server startup time */
 int	CONFIG_SERVER_STARTUP_TIME	= 0;
+/* zabbix server 
+int CONFIG_FOREGROUND           = ZBX_RUN_FOREGROUND;
 
 char	*CONFIG_LOAD_MODULE_PATH	= NULL;
 char	**CONFIG_LOAD_MODULE		= NULL;
@@ -669,6 +673,9 @@
 			case 'c':
 				CONFIG_FILE = zbx_strdup(CONFIG_FILE, zbx_optarg);
 				break;
+			case 'f':
+				CONFIG_FOREGROUND = ZBX_RUN_FOREGROUND;
+				break;
 			case 'R':
 				if (SUCCEED != parse_rtc_options(zbx_optarg, daemon_type, &t.flags))
 					exit(EXIT_FAILURE);
@@ -705,7 +712,7 @@
 	init_ipmi_handler();
 #endif
 
-	return daemon_start(CONFIG_ALLOW_ROOT, CONFIG_USER);
+	return daemon_start(CONFIG_ALLOW_ROOT, CONFIG_USER, CONFIG_FOREGROUND);
 }
 
 int	MAIN_ZABBIX_ENTRY()
Index: src/zabbix_server/server.c
===================================================================
--- src/zabbix_server/server.c	(revision 56907)
+++ src/zabbix_server/server.c	(working copy)
@@ -65,6 +65,7 @@
 const char	*help_message[] = {
 	"Options:",
 	"  -c --config <file>              Absolute path to the configuration file",
+	"  -f --foreground                 Run in foreground",
 	"  -R --runtime-control <option>   Perform administrative functions",
 	"",
 	"Runtime control options:",
@@ -89,6 +90,7 @@
 static struct zbx_option	longopts[] =
 {
 	{"config",		1,	NULL,	'c'},
+	{"foreground",	0,	NULL,	'f'},
 	{"runtime-control",	1,	NULL,	'R'},
 	{"help",		0,	NULL,	'h'},
 	{"version",		0,	NULL,	'V'},
@@ -96,7 +98,7 @@
 };
 
 /* short options */
-static char	shortopts[] = "c:hVR:";
+static char	shortopts[] = "c:hfVR:";
 
 /* end of COMMAND LINE OPTIONS */
 
@@ -192,6 +194,7 @@
 /* how often zabbix server sends configuration data to proxy, in seconds */
 int	CONFIG_PROXYCONFIG_FREQUENCY	= 3600;	/* 1h */
 int	CONFIG_PROXYDATA_FREQUENCY	= 1;	/* 1s */
+int	CONFIG_FOREGROUND			= ZBX_RUN_BACKGROUND;
 
 char	*CONFIG_LOAD_MODULE_PATH	= NULL;
 char	**CONFIG_LOAD_MODULE		= NULL;
@@ -634,6 +637,9 @@
 			case 'c':
 				CONFIG_FILE = zbx_strdup(CONFIG_FILE, zbx_optarg);
 				break;
+			case 'f':
+				CONFIG_FOREGROUND = ZBX_RUN_FOREGROUND;
+				break;
 			case 'R':
 				if (SUCCEED != parse_rtc_options(zbx_optarg, daemon_type, &t.flags))
 					exit(EXIT_FAILURE);
@@ -670,7 +676,7 @@
 	init_ipmi_handler();
 #endif
 
-	return daemon_start(CONFIG_ALLOW_ROOT, CONFIG_USER);
+	return daemon_start(CONFIG_ALLOW_ROOT, CONFIG_USER, CONFIG_FOREGROUND);
 }
 
 int	MAIN_ZABBIX_ENTRY()
